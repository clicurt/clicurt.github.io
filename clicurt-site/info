YOLOはディープラーニングアルゴリズムであるため、インストールは必要ありません。代わりに必要なのは、アルゴリズムを実行するディープラーニングフレームワークです。

YOLOと互換性のある3つの最も使用されている既知のフレームワークとそれぞれの長所と短所

Darknet：YOLOの開発者から構築され、yolo専用に作成されたフレームワークです。 
長所：高速で、GPUまたはCPUで動作します
短所：LinuxOSでのみ動作します

Darkflow：ダークネットをTensorflow（もう1つの深い学習フレームワーク）に適応させたものです。
長所：高速で、GPUまたはCPUで動作し、Linux、Windows、Macとも互換性があります。
短所：特にWindowsでのインストールは非常に複雑です

Opencv：opencvには、YOLOと連携するディープラーニングフレームワークもあります。 少なくともopencv3.4.2を必要があります。
長所：opencv以外のものをインストールする必要なしに動作します。
短所：CPUでのみ機能するため、ビデオをリアルタイムで処理するために非常に高速にすることはできません。


Make the directory and navigate in it. Clone the OpenCV repository by running the following command:
$ mkdir ~/opencv_build && cd ~/opencv_build
$ git clone https://github.com/opencv/opencv.git


Then, clone the OpenCV contrib repositories by using the following command:
$ git clone https://github.com/opencv/opencv_contrib.git


At the time of writing this article, OpenCV 4.4.0 is available as the latest stable version.
Step 3: Setup OpenCV build
Once the download is completed, create a directory named ‘build’ and navigate to it as follows:
$ cd ~/opencv_build/opencv
$ mkdir -p build && cd build


cmake -D CMAKE_BUILD_TYPE=RELEASE \
-D CMAKE_INSTALL_PREFIX=/usr/local \
-D OPENCV_ENABLE_NONFREE=ON \
-D INSTALL_C_EXAMPLES=ON \
-D INSTALL_PYTHON_EXAMPLES=ON \
-D OPENCV_GENERATE_PKGCONFIG=ON \
-D OPENCV_EXTRA_MODULES_PATH=~/opencv_build/opencv_contrib/modules \
-D BUILD_EXAMPLES=ON ..

pkg-config --modversion opencv4
